/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 20:36:20 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.height();
      int int0 = (-1);
      aVLTree0.insert((-6));
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int1 = (-1733);
      aVLTree_Node0.key = (-1733);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete((-1678));
      aVLTree_Node0.key = (-1);
      aVLTree_Node1.height = (-1844);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1843));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-1);
      aVLTree0.insert((-6));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = (-1733);
      aVLTree_Node0.key = (-1733);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1678));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(5, aVLTree0.height());
      
      aVLTree0.insert((-231));
      assertEquals(8, aVLTree0.height());
      
      int int5 = aVLTree0.getBalance(aVLTree_Node0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(8, aVLTree0.height());
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals((-6), int5);
      
      int int6 = aVLTree0.height();
      assertEquals(8, aVLTree0.height());
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals(8, int6);
      
      int int7 = aVLTree0.getBalance(aVLTree_Node0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(8, aVLTree0.height());
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertEquals((-6), int7);
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-231));
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-1);
      aVLTree0.insert((-6));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = (-1733);
      aVLTree_Node0.key = (-1733);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1678));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      int int5 = 0;
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      int int6 = (-231);
      aVLTree0.insert((-231));
      assertEquals(2, aVLTree0.height());
      
      int int7 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertTrue(int7 == int0);
      assertFalse(int7 == int6);
      assertTrue(int7 == int1);
      assertEquals((-1), int7);
      
      aVLTree_Node0.height = (-1733);
      assertEquals(2, aVLTree0.height());
      
      int int8 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertEquals(2, int8);
      
      int int9 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertTrue(int9 == int0);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertFalse(int9 == int6);
      assertTrue(int9 == int1);
      assertFalse(int9 == int8);
      assertEquals((-1), int9);
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-1);
      aVLTree0.insert((-6));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = (-1733);
      aVLTree_Node0.key = (-1733);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1678));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-231));
      assertEquals(2, aVLTree0.height());
      
      int int5 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals((-1), int5);
      
      int int6 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertEquals((-1), int6);
      
      aVLTree0.delete((-1));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node2);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      
      int int7 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertEquals(2, int7);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node3);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      
      aVLTree0.insert((-1733));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-1);
      aVLTree0.insert((-6));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = (-1733);
      aVLTree_Node0.key = (-1733);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1678));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(1, int4);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-231));
      assertEquals(2, aVLTree0.height());
      
      int int5 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals((-1), int5);
      
      int int6 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(2, int6);
      
      int int7 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
      assertEquals((-1), int7);
      
      aVLTree0.delete((-1));
      assertEquals(2, aVLTree0.height());
      
      int int8 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertTrue(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertEquals(2, int8);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(2);
      assertNull(aVLTree_Node2);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete((-231));
      assertEquals(1, aVLTree0.height());
      
      int int9 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertTrue(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertEquals(1, int9);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node3);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      
      aVLTree0.insert((-1733));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-3));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-3));
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-3188);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-3188));
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      aVLTree_Node0.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find((-3499));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-3030));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1074));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1106);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3759);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-796));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      assertNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.new Node((-1));
      assertNotNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      
      aVLTree0.delete((-1968));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node2.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node2);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(2, int0);
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1968));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-2388));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2388));
      assertEquals(0, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert(1701);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-2388));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-2711));
      assertNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-619));
      assertEquals(2, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2662));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(364);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-935));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = 0;
      assertEquals(0, aVLTree0.height());
      
      int int1 = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      
      aVLTree_Node0.key = 128;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0.left;
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(int1);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-204));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(490);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2856);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1006);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1074));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2105));
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(982);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-2079);
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2079));
      assertEquals(0, aVLTree0.height());
      
      int int1 = 823;
      aVLTree0.delete(823);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2079));
      assertEquals(1, aVLTree0.height());
      
      int int2 = 369;
      aVLTree0.insert(369);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert((-252));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1572);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1572);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-2703));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2703));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1642);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1097));
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNull(aVLTree_Node1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1097));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNull(aVLTree_Node2);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2193);
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree0.insert(1877);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1877);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-363));
      assertNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(2);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-668));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2066);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2941);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2941);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1606));
      assertNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1552));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1552));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(869);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.delete((-538));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-538));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(300);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2588));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-924));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-51));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2954));
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert((-6));
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = (-1716);
      aVLTree0.delete((-1678));
      aVLTree_Node0.key = (-1);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-231));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.find(2);
      aVLTree0.find((-1));
      aVLTree0.insert((-1716));
      aVLTree0.delete(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-341));
      aVLTree0.delete(2763);
      aVLTree0.insert(2763);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(2763);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
